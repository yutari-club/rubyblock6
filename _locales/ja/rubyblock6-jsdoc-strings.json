{
	"builder.Builder.copy": "最後に印を付けた位置からビルダーの現在位置まで立方体領域(りょういき)をコピーします。",
	"builder.Builder.face|param|direction": "方向転換(ほうこうてんかん)後のビルダーの向き",
	"builder.Builder.fill": "現在の位置と以前印を付けた位置の間の空間を埋(う)めます。",
	"builder.Builder.fill|param|block": "領域(りょういき)を埋(う)めるのに使用するブロックの種類",
	"builder.Builder.paste": "ビルダーの現在の位置に以前コピーした領域(りょういき)をペーストします。",
	"builder.Builder.popState": "ビルダーの状態を最後に状態スタックにプッシュしたときの状態に戻(もど)します。",
	"builder.Builder.raiseWall": "最後に印を付けた位置からのビルダーの移動経路に沿(そ)って、指定されたブロックの種類と高さの壁(かべ)を立てます。",
	"builder.Builder.raiseWall|param|block": "壁(かべ)に使用するブロックの種類",
	"builder.Builder.raiseWall|param|height": "ブロック数での壁(かべ)の高さ。たとえば：5",
	"builder.Builder.saveStructure": "「構造物の建築を開始する」を呼(よ)び出(だ)した後に建築したものを構造物として保存(ほぞん)する。",
	"builder.Builder.startStructure": "構造物の建築を開始する。この後ブロックを使って置いたり、範囲(はんい)を埋(う)めたり、線を引いたりすると構造物の範囲(はんい)として自動的に認識(にんしき)される。「構造物として保存(ほぞん)する」を使ってメモリに保存(ほぞん)し、「構造物を読(よ)み込(こ)む」を使ってすぐに再建築することができる。",
	"builder.Builder.tracePath": "最後に印を付けた位置から指定された種類のブロックを使って軌跡(きせき)をなぞります。",
	"builder.Builder.tracePath|param|block": "ビルダーの軌跡(きせき)をなぞるのに使用するブロックの種類",
	"builder.copy": "最後に印を付けた位置からビルダーの現在位置まで立方体領域(りょういき)をコピーします。",
	"builder.face|param|direction": "方向転換(ほうこうてんかん)後のビルダーの向き",
	"builder.fill": "現在の位置と以前印を付けた位置の間の空間を埋(う)めます。",
	"builder.fill|param|block": "領域(りょういき)を埋(う)めるのに使用するブロックの種類",
	"builder.paste": "ビルダーの現在の位置に以前コピーした領域(りょういき)をペーストします。",
	"builder.popState": "ビルダーの状態を最後に状態スタックにプッシュしたときの状態に戻(もど)します。",
	"builder.raiseWall": "最後に印を付けた位置からのビルダーの移動経路に沿(そ)って、指定されたブロックの種類と高さの壁(かべ)を立てます。",
	"builder.raiseWall|param|block": "壁(かべ)に使用するブロックの種類",
	"builder.raiseWall|param|height": "ブロック数での壁(かべ)の高さ。たとえば：5",
	"builder.saveStructure": "「構造物の建築を開始する」を呼(よ)び出(だ)した後に建築したものを構造物として保存(ほぞん)する。",
	"builder.startStructure": "構造物の建築を開始する。この後ブロックを使って置いたり、範囲(はんい)を埋(う)めたり、線を引いたりすると構造物の範囲(はんい)として自動的に認識(にんしき)される。「構造物として保存(ほぞん)する」を使ってメモリに保存(ほぞん)し、「構造物を読(よ)み込(こ)む」を使ってすぐに再建築することができる。",
	"builder.tracePath": "最後に印を付けた位置から指定された種類のブロックを使って軌跡(きせき)をなぞります。",
	"builder.tracePath|param|block": "ビルダーの軌跡(きせき)をなぞるのに使用するブロックの種類",
	"Array": "リスト内のアイテムの追加、削除(さくじょ)、および置(お)き換(か)えを行います。",
	"Array._pickRandom": "配列からランダムな値(あたい)を返す",
	"Array._popStatement": "配列から最後の要素を削除(さくじょ)し、その値(あたい)を返します。",
	"Array._removeAtStatement": "特定の位置にある要素を削除(さくじょ)します。",
	"Array._shiftStatement": "配列から最初の要素を削除(さくじょ)し、その値(あたい)を返します。このメソッドは、配列の長さを変更(へんこう)します。",
	"Array.concat|param|arr": "連結される他(ほか)の配列",
	"Array.every": "配列内のすべての要素が、指定された関数によって実装(じっそう)されたテストに合格するかどうかをテストします。",
	"Array.every|param|callbackfn": "最大 2 つの引数を受け取る関数。every メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼(よ)び出(だ)します。",
	"Array.fill": "配列の指定の範囲(はんい)のすべての要素を一定の値(あたい)にする。終了(しゅうりょう)インデックスは範囲(はんい)に含(ふく)まない。",
	"Array.filter|param|callbackfn": "最大 2 つの引数を受け取る関数。filter メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼(よ)び出(だ)します。",
	"Array.find": "指定されたテスト関数を満たす配列内の最初の要素の値(あたい)を返します。一つも見つからない場合は、未定義が返されます。",
	"Array.forEach": "配列の各要素に対して定義されたコールバック関数を呼(よ)び出(だ)す。",
	"Array.forEach|param|callbackfn": "最大 2 つの引数を受け取る関数。forEach メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼(よ)び出(だ)します。",
	"Array.get": "指定された位置の値(あたい)を取得します。",
	"Array.indexOf": "配列内で値(あたい)が最初に出現する位置を返します。",
	"Array.indexOf|param|fromIndex": "検索(けんさく)を開始する配列の場所。fromIndex を省略した場合、検索(けんさく)は位置 0 から始まります。",
	"Array.indexOf|param|item": "配列内で検索(けんさく)する値(あたい)。",
	"Array.insertAt": "指定された位置に値(あたい)を挿入(そうにゅう)し、長さを 1 つ増やします",
	"Array.insertAt|param|index": "値(あたい)を挿入(そうにゅう)するリスト中の位置を 0 から始まる値(あたい)で指定します。たとえば：0",
	"Array.isArray": "指定されたオブジェクトが配列か確認(かくにん)する。",
	"Array.length": "配列の長さを取得または設定します。この数値(すうち)は配(くばり)列の最後の要素の位置よりも 1 つ大きな値(あたい)になります。",
	"Array.map": "配列の各要素に対して定義されたコールバック関数を呼(よ)び出(だ)し、結果を含(ふく)む配列を返します。",
	"Array.map|param|callbackfn": "最大 2 つの引数を受け取る関数。map メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼(よ)び出(だ)します。",
	"Array.pop": "配列から最後の要素を削除(さくじょ)し、その値(あたい)を返します。",
	"Array.reduce": "配列のすべての要素に対して指定されたコールバック関数を呼(よ)び出(だ)します。コールバック関数の戻(もど)り値(ち)は累積(るいせき)した結果となり、次回コールバック関数が呼(よ)び出(だ)された際の引数として提供(ていきょう)されます。",
	"Array.reduce|param|callbackfn": "最大 3 つの引数を受け取る関数。reduce メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼(よ)び出(だ)します。",
	"Array.reduce|param|initialValue": "累積(るいせき)を開始する初期値(ち)。callbackfn 関数の初回呼(よ)び出(だ)し時にはこの値(あたい)を配列の値(あたい)ではなく、引数として提供(ていきょう)します。",
	"Array.removeAt": "特定の位置にある要素を削除(さくじょ)し、その要素を返します",
	"Array.removeElement": "オブジェクト内で最初に出現したものを削除(さくじょ)します。削除(さくじょ)された場合は true を返します。",
	"Array.reverse": "配列に含(ふく)まれる要素を逆の順番にします。最初の配列要素は最後の要素となり、最後の配列要素は最初の要素となります。",
	"Array.set": "指定された位置に値(あたい)を格納(かくのう)します",
	"Array.set|param|index": "値(あたい)を格納(かくのう)するリスト中の位置を 0 から始まる値(あたい)で指定します。たとえば：0",
	"Array.set|param|value": "挿入(そうにゅう)する値(あたい)。たとえば：0",
	"Array.shift": "配列から最初の要素を削除(さくじょ)し、その値(あたい)を返します。このメソッドは、配列の長さを変更(へんこう)します。",
	"Array.slice|param|end": "配列の指定部分の終了(しゅうりょう)位置。たとえば：0",
	"Array.some": "指定された関数で実装(じっそう)されているテストに、配列の中の少なくとも 1 つの要素が合格するかどうかを確認(かくにん)する。",
	"Array.some|param|callbackfn": "最大 2 つの引数を受け取る関数。some メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼(よ)び出(だ)します。",
	"Array.sort": "配列の要素を並(なら)び替(か)えた後、配列を返します。並(なら)び順(じゅん)は必ずしも安定しているとは限りません。",
	"Array.splice": "配列から要素を削除(さくじょ)します。",
	"Array.splice|param|deleteCount": "削除(さくじょ)する要素の数。たとえば：0",
	"Array.splice|param|start": "要素の削除(さくじょ)を開始する配列内の 0 から始まる位置。たとえば：0",
	"Array@type": "リスト内のアイテムの追加、削除(さくじょ)、および置(お)き換(か)えを行います。",
	"Buffer": "pythonに必要な空の実装(じっそう)バッファー",
	"ColoredBlock": "色を変更(へんこう)できるブロック",
	"FillOperation": "既存(きそん)のブロックに対する塗(ぬ)りつぶしオプション。既存(きそん)のブロックの維持(いじ)、入(い)れ替(か)え、破壊(はかい)を制御(せいぎょ)します。",
	"FillOperation.Destroy": "指定した領域(りょういき)内のすべてのブロック（空気を含(ふく)む）を指定されたブロックに置(お)き換(か)え、（未変更(へんこう)のものを含(ふく)む）既存(きそん)のブロックとブロックの中身をあたかもエンチャントされていないダイヤのシャベルやツルハシを使って採掘(さいくつ)されたエンティティであるかのようにドロップします。（つたのようにはさみを使ってのみ採掘(さいくつ)されるブロックはドロップしません。液体も同じです。）",
	"FillOperation.Hollow": "指定した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックは空気に変更(へんこう)され、それ自身ではなく中身をエンティティとしてドロップします。\n指定した領域(りょういき)の内側にブロックが存在(そんざい)しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"FillOperation.Keep": "指定した領域(りょういき)の空気ブロックのみを指定ブロックで置(お)き換(か)えます。",
	"FillOperation.Outline": "指定した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックには影響(えいきょう)はありません。指定した領域(りょういき)の内側にブロックが存在(そんざい)しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"FillOperation.Replace": "指定した領域(りょういき)内のすべてのブロック（空気を含(ふく)む）を指定されたブロックに置(お)き換(か)えますが、ブロックやブロックの中身をエンティティとしてドロップしません。",
	"GameDifficulty": "ゲームプレイ設定用のゲームの難易(なんい)度",
	"Math": "より複雑な数値(すうち)演算を行います。",
	"Math.abs": "数値(すうち)の絶対値(ぜったいち)を返します（絶対値(ぜったいち)とはゼロとの距離(きょり)です）。たとえば、-5の絶対値(ぜったいち)は、5の絶対値(ぜったいち)と同じく「5」です。",
	"Math.abs|param|x": "絶対値(ぜったいち)が必要な数値(すうち)式を指定します。",
	"Math.acos": "数値(すうち)のアークコサイン（ラジアン表記）を返します。",
	"Math.acos|param|x": "数値(すうち)",
	"Math.asin": "数値(すうち)のアークサイン（ラジアン表記）を返します。",
	"Math.asin|param|x": "数値(すうち)",
	"Math.atan": "数値(すうち)のアークタンジェント（ラジアン表記）を返します。",
	"Math.atan2": "左の値(あたい)を右の値(あたい)で割(わ)った結果のアークタンジェントを返します。",
	"Math.atan2|param|x": "数値(すうち)",
	"Math.atan2|param|y": "数値(すうち)",
	"Math.atan|param|x": "数値(すうち)",
	"Math.ceil": "引数で指定された数値(すうち)以上の最小値(ち)を返します。",
	"Math.ceil|param|x": "数値(すうち)表現を指定します。",
	"Math.constrain": "数値(すうち)を範囲(はんい)内に制限します",
	"Math.constrain|param|high": "データ範囲(はんい)の上限値(ち)（すべてのデータ型）",
	"Math.constrain|param|low": "データ範囲(はんい)の下限値(ち)（すべてのデータ型）",
	"Math.constrain|param|value": "制限する値(あたい)（すべてのデータ型）",
	"Math.cos": "数値(すうち)のコサインを返します。",
	"Math.exp|param|x": "数値(すうち)",
	"Math.floor": "引数で指定された数値(すうち)以下の最大値(ち)を返します。",
	"Math.floor|param|x": "数値(すうち)表現を指定します。",
	"Math.idiv": "2 つの数値(すうち)の商を符号(ふごう)付 32 ビット整数値(ち)で返します。",
	"Math.idiv|param|x": "最初の数値(すうち)",
	"Math.idiv|param|y": "二番目の数値(すうち)",
	"Math.imul": "2 つの数値(すうち)の積を符号(ふごう)付 32 ビット整数値(ち)で返します。",
	"Math.imul|param|x": "最初の数値(すうち)",
	"Math.imul|param|y": "二番目の数値(すうち)",
	"Math.log": "数値(すうち)の自然対数（底 e）を返します。",
	"Math.log|param|x": "数値(すうち)",
	"Math.map": "数値(すうち)を、ある範囲(はんい)から別の範囲(はんい)にマップします。つまり、数値(すうち)が``元の下限``なら``結果の下限``に変換(へんかん)され、``元の上限``なら``結果の上限``に変換(へんかん)され、間の値(あたい)なら間の値(あたい)に変換(へんかん)されます。",
	"Math.map|param|fromHigh": "元の値(あたい)の上限。たとえば：1023",
	"Math.map|param|fromLow": "元の値(あたい)の下限。",
	"Math.map|param|toHigh": "結果の値(あたい)の上限。たとえば：4",
	"Math.map|param|toLow": "結果の値(あたい)の下限。",
	"Math.map|param|value": "変換(へんかん)する、元の値(あたい)。",
	"Math.max": "指定された2つの数値(すうち)式のうち、大きい方を返します。",
	"Math.min": "指定された2つの数値(すうち)式のうち、小さい方を返します。",
	"Math.pow": "底を指定の指数で累乗(るいじょう)した値(あたい)を返します。",
	"Math.pow|param|x": "式の底の値(あたい)を指定します。",
	"Math.pow|param|y": "式の指数値(ち)を指定します。",
	"Math.random": "0と1の間の擬似(ぎじ)乱数(らんすう)を返します。",
	"Math.randomRange": "min と max の間に含(ふく)まれる疑似(ぎじ)乱数(らんすう)を返します。両方の数値(すうち)が整数値(ち)の場合は、結果も整数値(ち)となります。",
	"Math.randomRange|param|max": "境界を含(ふく)めた上限。たとえば：10",
	"Math.randomRange|param|min": "境界を含(ふく)めた下限。たとえば：0",
	"Math.round": "指定の数値(すうち)表現を最も近い数値(すうち)に丸めて返します。",
	"Math.roundWithPrecision": "``x``を、指定された``桁数(けたすう)``の数字に丸めます",
	"Math.roundWithPrecision|param|digits": "結果の桁数(けたすう)",
	"Math.round|param|x": "最も近い数値(すうち)に丸められる値(あたい)。",
	"Math.sign": "x が正、負、または 0 のどれであるかを示す符号(ふごう)を返します。",
	"Math.sign|param|x": "テストする数値(すうち)式",
	"Math.sin": "数値(すうち)のサインを返します。",
	"Math.sqrt": "数値(すうち)の平方根を返します。",
	"Math.sqrt|param|x": "数値(すうち)表現を指定します。",
	"Math.tan": "数値(すうち)のタンジェントを返します。",
	"Math.trunc": "小数部を切(き)り捨(す)てた数値(すうち)を返します。",
	"Math.trunc|param|x": "数値(すうち)表現。",
	"Number.isNaN": "指定された値(あたい)が数値(すうち)型のNaNかどうか確認(かくにん)する。",
	"Number.toString": "数値(すうち)の文字列表現を返します。",
	"Position": "プレイヤーの位置 (~) に対して相対的な世界の座標(ざひょう)。",
	"Position.getValue": "指定した座標(ざひょう)の値(あたい)を取得します（x、y または z）。",
	"Position.getValue|param|direction": "座標(ざひょう)の値(あたい)を返す軸(じく)",
	"Position.isRelative": "座標(ざひょう)がユーザーに対して相対的であるかどうかを示す値(あたい)を取得します。",
	"Position.toWorld": "この位置を世界での位置に変換(へんかん)して、世界での位置を新たに作成します。",
	"ShapeOperation": "図形を埋(う)める演算子",
	"ShapeOperation.Hollow": "指定した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックは空気に変更(へんこう)され、それ自身ではなく中身をエンティティとしてドロップします。\n指定した領域(りょういき)の内側にブロックが存在(そんざい)しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"ShapeOperation.Outline": "指定した領域(りょういき)の外枠(そとわく)にあるブロックのみを指定ブロックで置(お)き換(か)えます。\n中のブロックには影響(えいきょう)はありません。指定した領域(りょういき)の内側にブロックが存在(そんざい)しない場合（少なくとも一つのディメンジョンにおいて3つのブロックよりも小さいため）、replace と同様の動作を行います。",
	"ShapeOperation.Replace": "指定した領域(りょういき)内のすべてのブロック（空気を含(ふく)む）を指定されたブロックに置(お)き換(か)えますが、ブロックやブロックの中身をエンティティとしてドロップしません。",
	"String": "テキスト文字列の結合、分割(ぶんかつ)、検索(けんさく)を行います。",
	"String.charAt|param|index": "目的の文字の位置を 0 から始まる値(あたい)で指定します。",
	"String.charCodeAt": "指定された位置にある文字の Unicode 値(あたい)を返します。",
	"String.charCodeAt|param|index": "目的の文字の位置を 0 から始まる値(あたい)で指定します。指定した位置に文字がない場合は、NaN が返されます。",
	"String.compare": "2 つの文字列の文字の順序にどのような違(ちが)いがあるかを確認(かくにん)してください (ASCII エンコーディングで)。",
	"String.compare|param|that": "ターゲット文字列と比較(ひかく)する文字列",
	"String.concat|param|other": "文字列の末尾(まつび)に追加する文字列。",
	"String.fromCharCode": "指定された文字コードから、その文字コードに相当する文字1文字だけを含(ふく)む文字列を作ります。",
	"String.includes": "文字列に指定した文字列の文字が含(ふく)まれているかどうかを判断します。",
	"String.includes|param|searchValue": "検索(けんさく)するテキスト",
	"String.includes|param|start": "検索(けんさく)の開始インデックス (オプション)",
	"String.indexOf": "文字列内で指定した値(あたい)が最初に出現する位置を返します。",
	"String.indexOf|param|searchValue": "検索(けんさく)するテキスト",
	"String.indexOf|param|start": "検索(けんさく)の開始インデックス (オプション)",
	"String.isEmpty": "文字列が空かどうかを示す値(あたい)を返します",
	"String.replace": "指定された文字列に最初に一致(いっち)したところを、別の指定された文字列に置(お)き換(か)えたものを返す。",
	"String.replaceAll": "指定された文字列に一致(いっち)したところすべてを、別の指定された文字列に置(お)き換(か)えたものを返す。",
	"String.replaceAll|param|replacer": "現在の文字列で部分文字列を置(お)き換(か)える先の文字列、または部分文字列を受け取り置(お)き換(か)える先の文字列を返す関数。",
	"String.replaceAll|param|toReplace": "現在の文字列で置(お)き換(か)えられる部分文字列",
	"String.replace|param|replacer": "現在の文字列で部分文字列を置(お)き換(か)える先の文字列、または部分文字列を受け取り置(お)き換(か)える先の文字列を返す関数。",
	"String.replace|param|toReplace": "現在の文字列で置(お)き換(か)えられる部分文字列",
	"String.slice|param|start": "最初の文字の位置。負の値(あたい)を指定すると、末尾(まつび)から数えることができます。たとえば：0",
	"String.split": "区切り文字で文字列を分割(ぶんかつ)する",
	"String.substr|param|length": "抽出(ちゅうしゅつ)する文字数",
	"String.substr|param|start": "最初の文字の位置。負の値(あたい)を指定すると、末尾(まつび)から数えることができます。たとえば：0",
	"String.toLowerCase": "文字列を小文字に変換(へんかん)する。",
	"String.toUpperCase": "文字列を大文字に変換(へんかん)する。",
	"String.trim": "現在の文字列の両端(りょうたん)から空白を削除(さくじょ)した部分文字列を返します",
	"String@type": "テキスト文字列の結合、分割(ぶんかつ)、検索(けんさく)を行います。",
	"StringMap": "文字列のキーと文字列の値(あたい)の辞書",
	"TargetSelector.addRule|param|value": "ルールの値(あたい)。たとえば：chicken",
	"TargetSelector.atCoordinate": "このターゲットのセレクターの基本座標(ざひょう)を設定します。",
	"TargetSelector.atCoordinate|param|p": "このセレクターに設定すべき座標(ざひょう)",
	"TargetSelector.outsideRadius": "このセレクターの基本座標(ざひょう)からの最小距離(きょり)を設定します。",
	"TargetSelector.outsideRadius|param|radius": "このターゲットセレクターからの最小距離(きょり)（ブロック単位）。たとえば：10",
	"TargetSelector.toString": "このターゲットセレクターのゲームの表記を含(ふく)む文字列を返します。",
	"TargetSelector.withinRadius": "このセレクターの基本座標(ざひょう)からの最大距離(きょり)を設定します。",
	"TargetSelector.withinRadius|param|radius": "このターゲットセレクターからの最大距離(きょり)（ブロック単位）。たとえば：5",
	"TestForBlocksMask.All": "元の領域(りょういき)と移動先の領域(りょういき)内のすべてのブロックは、正確に一致(いっち)する必要があります。",
	"TestForBlocksMask.Masked": "元の領域(りょういき)内の空気ブロックは、移動先の領域(りょういき)内の任意のブロックに一致(いっち)します。",
	"TimeQuery.RealLife": "Minecraft ゲームのティックで表した一日の実際の時刻(じこく)",
	"TravelMethod.Fall": "飛行しない時は宙(ちゅう)に浮(う)きます（上か下に転びます）",
	"TravelMethod.SwimLava": "溶岩(ようがん)の中で泳ぐ",
	"TravelMethod.Walk": "普通(ふつう)に歩く（地上での既定(きてい)値(ち)）",
	"_py.range": "指定された値(あたい)未満までの数値(すうち)のシーケンスを返す。もし複数の引数が指定された場合、最初の引数はシーケンスの最初の値(あたい)を示します。",
	"_py.range|param|first": "シーケンスを終える値(あたい)。この値(あたい)はシーケンスに含(ふく)まれない。",
	"_py.range|param|step": "範囲(はんい)内の各ステップで増減する値(あたい)。0以外の整数でなければならない。",
	"_py.range|param|stop": "シーケンスを終える値(あたい)。この値(あたい)はシーケンスに含(ふく)まれない。",
	"_py.slice": "pythonの拡張(かくちょう)スライス構文に従(したが)って、配列の一部を返す。",
	"_py.stringSlice": "pythonの拡張(かくちょう)スライス構文に従(したが)って、文字列の一部を返す。",
	"agent": "あなたの目標達成を支援(しえん)する Minecraft のアシスタント。",
	"agent.attack": "エージェントに指定された方向に攻撃(こうげき)を命令するコマンドです。",
	"agent.attack|param|direction": "攻撃(こうげき)する方向。たとえば：SixDirection.Forward",
	"agent.collect": "エージェントに、指定したブロックまたはアイテムを回収(かいしゅう)させるためのコマンドです。",
	"agent.collectAll": "エージェントに、近くに存在(そんざい)する全(すべ)てのブロックやアイテムを回収(かいしゅう)させるためのコマンドです。",
	"agent.collect|param|block": "回収(かいしゅう)するブロックまたはアイテムの種類",
	"agent.destroy": "エージェントに、指定した方向に存在(そんざい)するブロックを破壊(はかい)させるためのコマンドです。",
	"agent.destroy|param|direction": "エージェントが壊(こわ)すブロックの方向。たとえば：SixDirection.Forward",
	"agent.detect": "エージェントが隣接(りんせつ)している指定した方向のマスに、ブロックが存在(そんざい)するかどうかを検知する。",
	"agent.detect|param|direction": "検出を実施(じっし)する方向。たとえば：SixDirection.Forward",
	"agent.drop|param|slot": "アイテムを削除(さくじょ)する 1 から 27 のスロット番号を指定します。たとえば：1",
	"agent.getItemCount": "指定したスロットに存在(そんざい)するアイテムの数を取得します。",
	"agent.getPosition": "エージェントの位置をワールド座標(ざひょう)で返す。",
	"agent.inspect": "指定した方向に存在(そんざい)するブロックを調査し、ブロックIDやデータを返します。",
	"agent.interact": "(右クリックしたように)操作(そうさ)する。",
	"agent.setItem|param|blockOrItem": "与(あた)えるブロックまたはアイテム",
	"blocks": "世界でブロックを追加、調査、変更(へんこう)するためのすべて。",
	"blocks.blockWithData": "ゲーム内のブロックまたはアイテムのデータ値(ち)を表します。",
	"blocks.blockWithData|param|data": "ブロックまたはアイテムのデータ値(ち)",
	"blocks.clone": "立方体領域(りょういき)を別の場所に複製します。",
	"blocks.cloneFiltered": "領域(りょういき)内のブロックが特定の種類のブロックと一致(いっち)する場合にのみ、立方体領域(りょういき)を別の場所に複製します。",
	"blocks.cloneFiltered|param|begin": "立方体領域(りょういき)の最初の角",
	"blocks.cloneFiltered|param|destination": "移動先領域(りょういき)の最初の角",
	"blocks.cloneFiltered|param|end": "立方体領域(りょういき)の対角線上にある角",
	"blocks.cloneFiltered|param|mode": "複製された領域(りょういき)の処理(しょり)方法",
	"blocks.clone|param|begin": "立方体領域(りょういき)の最初の角",
	"blocks.clone|param|destination": "移動先領域(りょういき)の最初の角",
	"blocks.clone|param|end": "立方体領域(りょういき)の対角線上にある角",
	"blocks.clone|param|mask": "空気ブロックの処理(しょり)方法",
	"blocks.clone|param|mode": "複製された領域(りょういき)の処理(しょり)方法",
	"blocks.comparator|param|mode": "コンパレーターの比較(ひかく)モード",
	"blocks.fill": "2 つの地点の間の空間を埋(う)めます。",
	"blocks.fill|param|block": "空間を埋(う)めるのに使用するブロック",
	"blocks.fill|param|from": "立方体領域(りょういき)の最初の角",
	"blocks.fill|param|operator": "範囲(はんい)内の既(すで)に置かれていたブロックの処理(しょり)",
	"blocks.fill|param|to": "立方体領域(りょういき)の対角線上にある角",
	"blocks.kindsOfBlocksInRange": "このAPIは廃止(はいし)される予定です。",
	"blocks.onBlockBroken": "特定の種類のブロックが採掘(さいくつ)されるか、破壊(はかい)されたときにコードを実行します。",
	"blocks.onBlockBroken|param|block": "破壊(はかい)されたときにこのコードを実行するブロックの種類",
	"blocks.positionsOfBlocksInRange": "このAPIは廃止(はいし)される予定です。",
	"blocks.print|param|position": "文字を表示する場所の座標(ざひょう)",
	"blocks.repeater|param|delay": "ゲームのティックで表したリピーターの遅延(ちえん)時間",
	"blocks.replace": "指定された領域(りょういき)内の特定の種類のすべてのブロックを、新しい種類のブロックに入(い)れ替(か)えます。",
	"blocks.replace|param|from": "立方体領域(りょういき)の最初の角",
	"blocks.replace|param|newblock": "既存(きそん)のブロックと入(い)れ替(か)える新しいブロックの種類",
	"blocks.replace|param|oldblock": "新しいブロックの種類と入(い)れ替(か)えるブロックの種類",
	"blocks.replace|param|to": "立方体領域(りょういき)の対角線上にある角",
	"blocks.testForBlock": "指定した座標(ざひょう)のブロックが特定の種類のブロックかどうかを調査します。",
	"blocks.testForBlocks": "2 つの領域(りょういき)内のブロックが一致(いっち)するかどうかを調査します。",
	"blocks.testForBlock|param|pos": "ブロックが存在(そんざい)すべき座標(ざひょう)",
	"console.inspect": "指定されたオブジェクトや値(あたい)を文字列で表現する。",
	"console.inspect|param|maxElements": "[省略可能]文字列で表現するオブジェクトの最大数値(すうち)",
	"console.inspect|param|obj": "文字列で表現する値(あたい)",
	"gameplay": "ゲームのモード、天気、時間を制御(せいぎょ)し、ルールを変更(へんこう)するためのコマンド。",
	"gameplay.dismissChat": "チャット画面が開いている場合は閉(と)じる (Minecraft Educationのみ)",
	"gameplay.immutableWorld": "ワールドか編集可能かどうかを変更(へんこう)する。",
	"gameplay.isDaylightTime": "現在の時刻(じこく)を、ゲームのティック数で取得します。",
	"gameplay.isDaylightTime|param|query": "取得する時刻(じこく)の種類",
	"gameplay.setDifficulty": "ゲームの難易(なんい)度を変更(へんこう)します。",
	"gameplay.setDifficulty|param|difficulty": "新しい難易(なんい)度",
	"gameplay.setGameMode": "選択(せんたく)したプレイヤーのゲームモードを変更(へんこう)します。",
	"gameplay.setGameMode|param|player": "ゲームモードを変更(へんこう)するプレイヤーを決定するセレクター",
	"gameplay.setGameRule|param|rule": "変更(へんこう)するゲームのルール。たとえば：GameRule.PvP",
	"gameplay.setWeather": "現在の天気を変更(へんこう)します。",
	"gameplay.time": "既定(きてい)の時刻(じこく)を表します。",
	"gameplay.timeAdd": "現在の時刻(じこく)にティック（このゲームでの時間の単位）を追加します。",
	"gameplay.timeAdd|param|amount": "現在の時刻(じこく)に追加するティックの数。たとえば：100",
	"gameplay.timeQuery": "現在の時刻(じこく)を、ゲームのティック数で取得します。",
	"gameplay.timeQuery|param|query": "取得する時刻(じこく)の種類",
	"gameplay.timeSet": "現在の時刻(じこく)を、ゲームのティック数を指定して既定(きてい)の時刻(じこく)か指定の時刻(じこく)に設定します。",
	"gameplay.timeSet|param|time": "目的の時刻(じこく)。たとえば：DayTime.Day",
	"gameplay.time|param|time": "既定(きてい)の時刻(じこく)。たとえば：DateTime.Day",
	"gameplay.title": "選択(せんたく)したターゲットのタイトルとサブタイトルを表示します",
	"gameplay.title|param|target": "選択(せんたく)するプレイヤーとエンティティ",
	"gameplay.title|param|title": "表示する大きなタイトル",
	"gameplay.toggleDownfall": "雨が降っていなかったら雨を降らし、雨が降っていたら雨を止めます。",
	"gameplay.xp": "選択したプレイヤーに経験値を追加します。",
	"gameplay.xp|param|amount": "追加する経験値のポイント。たとえば：10",
	"gameplay.xp|param|target": "経験値を追加するプレイヤーを決定するためのセレクター",
	"loops.forever": "コードを、ずっとバックグラウンドでくり返します。くり返しの1回ごとに、ほかのコードを実行する時間を与えます。",
	"loops.forever|param|body": "ずっとくり返すコード",
	"loops.pause": "ミリ秒で指定された時間、一時停止します。",
	"loops.pause|param|ms": "ひと休みする時間の長さ（ミリ秒）。たとえば：100、200、500、1000、2000",
	"loops.runInBackground": "現在のコードと並行してこのコードを実行します。",
	"mobs": "Minecraft の世界に住んでいる生き物。",
	"mobs._queryTargetCore": "指定されたターゲットセレクターの情報を取得する。",
	"mobs._queryTargetCore|param|target": "情報を取得するエンティティを決定するターゲットセレクター",
	"mobs.animal": "ゲーム内の動物です。",
	"mobs.animal|param|name": "動物の種類",
	"mobs.applyEffect": "指定された対象に特殊効果を適用します",
	"mobs.applyEffect|param|amplifier": "特殊効果の強さ",
	"mobs.applyEffect|param|duration": "エフェクトの長さ",
	"mobs.applyEffect|param|effect": "適用する特殊効果",
	"mobs.applyEffect|param|target": "どのエンティティが手に持っているアイテムにエンチャントを付与されるかを決定するターゲットセレクター",
	"mobs.clearEffect": "指定された対象からすべてのステータス効果を解除する。",
	"mobs.clearEffect|param|target": "どのエンティティがステータス効果を解除されるかを決定するターゲットセレクター",
	"mobs.effect": "指定された対象に特殊効果を適用します",
	"mobs.effect|param|amplifier": "特殊効果の強さ",
	"mobs.effect|param|duration": "特殊効果の長さ",
	"mobs.effect|param|effect": "適用する特殊効果",
	"mobs.effect|param|target": "どのエンティティが手に持っているアイテムにエンチャントを付与されるかを決定するターゲットセレクター",
	"mobs.enchant": "指定されたターゲットに特定のエンチャントを適用します。",
	"mobs.enchant|param|level": "エンチャントの強さ。たとえば：1",
	"mobs.enchant|param|spell": "エンチャントのコードネーム。たとえば：「infinity」",
	"mobs.enchant|param|target": "どのプレイヤーがエンチャントを得るかを決定するターゲットセレクター",
	"mobs.entitiesByType": "特定の種類のモブ（動物やモンスター）をすべて選択します。",
	"mobs.entitiesByType|param|type": "選択するモブの種類",
	"mobs.execute": "他のターゲットとしてコマンドを実行します。",
	"mobs.executeDetect": "特定の種類のブロックが指定された位置で検出されたときにコマンドを実行します。",
	"mobs.executeDetect|param|command": "指定されたブロックが正常に検出された場合に選択したターゲットが実行する完全なコマンド。たとえば：「say Hi!」",
	"mobs.executeDetect|param|detectBlock": "調査するブロックの種類",
	"mobs.executeDetect|param|detectPosition": "ブロックを検出する位置",
	"mobs.execute|param|command": "選択したターゲットが実行する完全なコマンド。たとえば：「say Hi!」",
	"mobs.execute|param|position": "コマンドを実行する位置の座標",
	"mobs.execute|param|target": "どのエンティティがコマンドを実行するのかを決定するターゲットセレクター",
	"mobs.give": "ゲームからブロックやアイテムを指定されたプレイヤーに渡します。",
	"mobs.give|param|amount": "与える数量。たとえば：1",
	"mobs.give|param|block": "与えるブロックまたはアイテム",
	"mobs.give|param|target": "どのプレイヤーがブロックやアイテムを得るかを決定するターゲットセレクター",
	"mobs.kill": "選択されたエンティティを行動不能にする",
	"mobs.kill|param|target": "どのエンティティが行動不能になるのかを決定するターゲットセレクター",
	"mobs.monster": "ゲーム内のモンスターです。",
	"mobs.monster|param|name": "モンスターの種類",
	"mobs.near": "指定した位置近くのターゲットを選択します",
	"mobs.near|param|pos": "ターゲットを選択する場所付近の位置",
	"mobs.near|param|radius": "指定されたターゲット選択位置からの距離（ブロック単位）。たとえば：5",
	"mobs.near|param|target": "選択されるエンティティの種類",
	"mobs.onMobKilled": "特定の種類の生き物が行動不能になったときに、コードを実行します。",
	"mobs.onMobKilled|param|mob": "生き物の種類",
	"mobs.parseSelector": "指定の文字列を TargetSelector オブジェクトに解析します。この関数は正しい型の引数が与えられたかどうかや、引数の名前が有効であるかどうかを確認するためのチェックは行いません。\n\n@returns 解析された TargetSelector オブジェクトまたは null（文字列が無効だった場合）",
	"mobs.parseSelector|param|str": "文字列を解析するターゲットセレクター",
	"mobs.playerByName": "指定された名前を持つプレイヤーを選択します。",
	"mobs.playerByName|param|name": "選択するプレイヤーの名前。たとえば：名前",
	"mobs.playersInGameMode": "指定されたゲームモードのプレイヤーをすべて選択します。",
	"mobs.playersInGameMode|param|mode": "すべてのプレイヤーを選択するゲームモード",
	"mobs.projectile": "ゲーム内の飛び道具です。",
	"mobs.projectile|param|name": "飛び道具の種類",
	"mobs.queryTarget": "指定されたターゲットセレクターの情報を取得する。",
	"mobs.queryTarget|param|target": "情報を取得するエンティティを決定するターゲットセレクター",
	"mobs.spawn": "指定した場所に生き物を召喚します。",
	"mobs.spawnParticle": "指定された位置にパーティクルを表示させる。",
	"mobs.spawnParticle|param|position": "パーティクルを表示させる位置",
	"mobs.spawn|param|destination": "生き物を召喚する位置の座標",
	"mobs.spawn|param|mob": "召喚する生き物の種類",
	"mobs.target": "プレイヤーまたはモブのセットを選択します。",
	"mobs.target|param|kind": "選択されるエンティティの種類",
	"mobs.teleportToPlayer": "エンティティをプレイヤーにテレポートします。",
	"mobs.teleportToPlayer|param|destination": "どのプレイヤーにエンティティをテレポートするのかを決定するターゲットセレクター",
	"mobs.teleportToPlayer|param|target": "どのエンティティがテレポートされるのかを決定するターゲットセレクター",
	"mobs.teleportToPosition": "エンティティをほかの場所にテレポートします。",
	"mobs.teleportToPosition|param|destination": "選択したエンティティのテレポート先の座標",
	"mobs.teleportToPosition|param|target": "どのエンティティがテレポートされるのかを決定するターゲットセレクター",
	"parseFloat": "文字列を数値に変換します。",
	"parseInt": "文字列を整数に変換します。",
	"parseInt|param|radix": "テキスト内の数値の基数を指定する 2 ~ 36 の範囲の値です。",
	"parseInt|param|text": "整数に変換する文字列。例: \"123\"",
	"player": "コマンドの実行、情報交換、ゲーム内で発生するイベントへの応答を行います。",
	"player.chatCommandSyntaxError": "ゲーム内チャットでチャットコマンドのヘルプメッセージを表示します。\n* @param helpStr 書式付きのコマンド構文",
	"player.errorMessage": "ゲーム内チャットでエラーメッセージを表示します。\n* @param msg ゲーム内チャットに表示するエラーメッセージ",
	"player.execute": "現在のプレイヤーとしてゲームのコマンドを実行します。",
	"player.execute|param|command": "実行するスラッシュコマンド（先頭に``/``を入れる必要はありません）。たとえば：「say Hi!」",
	"player.getChatArg": "最後のプレイヤーのチャットメッセージから指定された引数を取得します。",
	"player.getChatArgs": "指定したコマンドの引数を取得します。\n\n* 注意：これは RefCollection を返しますが、シミュレータの設定により RefCollection を return 型として宣言することができません。代わりにシグネチャでは string[] を使用しますが、実際には RefCollection を <any> としてキャストして返します。",
	"player.getChatArgs|param|command": "引数を取得するチャットコマンド",
	"player.getOrientation": "プレイヤーの向きを度数で返す。",
	"player.message": "最後のメッセージがある場合は取得します。",
	"player.name": "現在のプレイヤー（あなた）の名前を返します。",
	"player.onArrowShot": "現在のプレーヤーが矢を打った時に、コードを実行します。",
	"player.onBounced": "現在のプレーヤーがスライムブロックの上でバウンドした時に、コードを実行します。",
	"player.onCameraUsed": "カメラで写真を撮影した時に、コードを実行します。",
	"player.onChat": "設定されたキーワードをゲーム内チャットで入力すると、ハンドラー内のコードを実行します。",
	"player.onChatCommand": "設定されたキーワードをゲーム内チャットで入力すると、ハンドラー内のコードを実行します。",
	"player.onChatCommandCore": "キーワードをチャットで入力すると、コードを実行します。",
	"player.onChatCommandCore|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"player.onChatCommand|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"player.onChat|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"player.onDied": "現在のプレイヤーが死んだとき、コードを実行します。",
	"player.onItemInteracted": "アイテムが使用された時にプログラムを実行する",
	"player.onTeleported": "現在のプレーヤーがテレポートをするときにコードを実行します。",
	"player.onTellCommand": "ほかのプレーヤーがあなたに特定のメッセージをささやいたときにコードを実行します。",
	"player.onTellCommand|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"player.onTravelled": "現在のプレーヤーが指定された方法で移動した時にコードを実行します。",
	"player.onTravelled|param|method": "移動方法",
	"player.position": "現在のプレイヤーの世界での位置を返します。",
	"player.runChatCommand": "コード内でチャットコマンドを実行します。",
	"player.runChatCommandWithArguments": "コード内でチャットコマンドを引数付きで実行します。",
	"player.runChatCommandWithArguments|param|arg": "チャット コマンドで利用したいすべての引数を含む文字列",
	"player.runChatCommandWithArguments|param|command": "実行するチャットコマンド。たとえば：「jump」",
	"player.runChatCommand|param|command": "実行するチャットコマンド。たとえば：「jump」",
	"player.say": "ゲーム内チャットにメッセージを送信します。",
	"player.say|param|message": "チャットに表示するメッセージ。たとえば：「Hi!」",
	"player.teleport": "現在のプレーヤーを別の位置にテレポートさせます。",
	"player.teleport|param|to": "目的の位置",
	"player.tell": "ターゲットにメッセージをささやきます。",
	"player.tell|param|message": "ささやく文字列。たとえば：「Hi!」",
	"player.tell|param|target": "エンティティのセレクター",
	"player.warningMessage": "チャットで(橙色の文字で)警告を表示する。",
	"pos": "新しく相対的な位置を作成します（東西、上下、南北）。",
	"posCamera": "新しくカメラ座標を作成する。右、上、前",
	"posCamera|param|x": "左（-x）または右（+x）方向の座標（ブロック単位）",
	"posCamera|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"posCamera|param|z": "後ろ（-z）または前（-z）方向の座標（ブロック単位）",
	"posLocal": "新しくローカル座標を作成する。左、上、前",
	"posLocal|param|x": "左（+x）または右（-x）方向の座標（ブロック単位）",
	"posLocal|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"posLocal|param|z": "前（+z）または後ろ（-z）方向の座標（ブロック単位）",
	"positions": "世界での位置と相対的な位置を表します。",
	"positions.add": "2 つの指定位置を追加して新しい位置を作成します。",
	"positions.add|param|p1": "追加する最初の位置",
	"positions.add|param|p2": "追加する二番目の位置",
	"positions.create": "新しく相対的な位置を作成します（東西、上下、南北）。",
	"positions.createCamera": "新しくカメラ座標を作成する。右、上、前",
	"positions.createCamera|param|x": "左（+x）または右（-x）方向の座標（ブロック単位）",
	"positions.createCamera|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"positions.createCamera|param|z": "前（+z）または後ろ（-z）方向の座標（ブロック単位）",
	"positions.createHybrid": "相対座標と絶対座標を混在させた新しい位置を作成します。",
	"positions.createLocal": "新しくローカル座標を作成する。左、上、前",
	"positions.createLocal|param|x": "左（+x）または右（-x）方向の座標（ブロック単位）",
	"positions.createLocal|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"positions.createLocal|param|z": "前（+z）または後ろ（-z）方向の座標（ブロック単位）",
	"positions.createWorld": "新しい世界での位置を作成します（東西、上下、南北）。",
	"positions.createWorld|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
	"positions.createWorld|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"positions.createWorld|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
	"positions.create|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
	"positions.create|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"positions.create|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
	"positions.equals": "2つの位置が同等かどうかを比較します。",
	"positions.equals|param|p1": "比較する最初の位置",
	"positions.equals|param|p2": "比較する 2 番目の位置",
	"positions.groundPosition": "指定された位置の下の地面を探し、そのすぐ上にある空気ブロックの座標を返す。もし指定された位置のブロックが固体ブロックの場合、その下を探していき見つかった空気ブロックから地面を探す。液体は固体とみなされる。",
	"positions.groundPosition|param|pos": "地面を探し始める位置",
	"positions.random": "指定された立方体領域内でランダムに位置を選択します。",
	"positions.random|param|p1": "立方体領域の最初の角の位置",
	"positions.random|param|p2": "立方体領域の対角線上にある角の位置",
	"positions.toCompassDirection": "方位の度数を最も近い四方位に変換する。",
	"positions.toCompassDirection|param|deg": "四方位に変換される方位の度数",
	"pos|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
	"pos|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"pos|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
	"randint": "min と max の間に含まれる疑似乱数を返します。両方の数値が整数値の場合は、結果も整数値となります。",
	"randint|param|max": "境界を含めた上限。たとえば：10",
	"randint|param|min": "境界を含めた下限。たとえば：0",
	"randpos": "指定された立方体領域内でランダムに位置を選択します。",
	"randpos|param|p1": "立方体領域の最初の角の位置",
	"randpos|param|p2": "立方体領域の対角線上にある角の位置",
	"world": "新しい世界での位置を作成します（東西、上下、南北）。",
	"world|param|x": "東（+x）または西（-x）方向の座標（ブロック単位）",
	"world|param|y": "上（+y）または下（-y）方向の座標（ブロック単位）",
	"world|param|z": "南（+z）または北（-z）方向の座標（ブロック単位）",
	"ExplorationTimeQuery": "時間を取得する際の時間の種類",
	"exploration.isDaylightTimeAsync": "現在の時刻を、ゲームのティック数で取得します。",
	"exploration.isDaylightTimeAsync|param|query": "取得する時刻の種類",
	"exploration.setDifficulty|param|difficulty": "新しい難易度",
	"exploration.setExplorationRule|param|enabled": "指定されたルールを有効にするかどうか",
	"exploration.setWeather": "現在の天気を変更します。",
	"exploration.time": "既定の時刻を表します。",
	"exploration.timeAdd": "現在の時刻にティック（このゲームでの時間の単位）を追加します。",
	"exploration.timeAdd|param|amount": "現在の時刻に追加するティックの数。たとえば：100",
	"exploration.timeQuery|param|query": "取得する時刻の種類",
	"exploration.timeSet|param|time": "目的の時刻。たとえば：DayTime.Day",
	"exploration.time|param|time": "既定の時刻。たとえば：DateTime.Day",
	"exploration.title": "選択したターゲットのタイトルとサブタイトルを表示します",
	"exploration.title|param|subTitle": "表示するサブタイトル",
	"exploration.title|param|title": "表示する大きなタイトル",
	"exploration.toggleDownfall": "雨が降っていなかったら雨を降らし、雨が降っていたら雨を止めます。",
	"exploration.xp|param|amount": "追加する経験値のポイント。たとえば：10",
	"mobs.boost": "指定されたターゲットに特定のエンチャントを適用します。",
	"mobs.onMobEliminated|param|mob": "生き物の種類",
	"mobs.targetUser|param|kind": "選択されるエンティティの種類",
	"mobs.teleportToUser|param|target": "どのエンティティがテレポートされるのかを決定するターゲットセレクター",
	"user.execute|param|command": "実行するスラッシュコマンド（先頭に``/``を入れる必要はありません）。たとえば：「say Hi!」",
	"user.message": "最後のメッセージがある場合は取得します。",
	"user.onChat|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"user.onTellCommand|param|command": "このコマンドに関連づけられるチャットのキーワード（``*`` はすべてのメッセージに対して）。たとえば：「jump」",
	"user.onTravelled|param|method": "移動方法",
	"user.runChatCommand": "コード内でチャットコマンドを実行します。",
	"user.runChatCommandWithArguments": "コード内でチャットコマンドを引数付きで実行します。",
	"user.runChatCommandWithArguments|param|arg": "チャット コマンドで利用したいすべての引数を含む文字列",
	"user.runChatCommandWithArguments|param|command": "実行するチャットコマンド。たとえば：「jump」",
	"user.runChatCommand|param|command": "実行するチャットコマンド。たとえば：「jump」",
	"user.teleport|param|to": "目的の位置",
	"user.tell": "ターゲットにメッセージをささやきます。",
	"user.tell|param|message": "ささやく文字列。たとえば：「Hi!」",
	"user.tell|param|target": "エンティティのセレクター",
	"shapes": "線、球およびその他の幾何学図形を作ります。",
	"shapes.circle": "中心点を中心にブロックで円を作ります。",
	"shapes.circle|param|radius": "円の半径。たとえば：5",
	"shapes.line": "ある位置から別の位置までブロックの線を作ります。",
	"shapes.sphere": "中心点を中心にブロックで球を作ります。",
	"shapes.sphere|param|radius": "球の半径。たとえば：5"
}